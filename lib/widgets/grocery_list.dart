import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;

import 'package:shopping_list/data/categories.dart';
import 'package:shopping_list/models/grocery_item.dart';
import 'package:shopping_list/widgets/new_item.dart';

class GroceryList extends StatefulWidget {
  const GroceryList({super.key});

  @override
  State<GroceryList> createState() => _GroceryListState();
}

class _GroceryListState extends State<GroceryList> {
  List<GroceryItem> _groceryItems = [];
  // late List<GroceryItem> _loadedItems;
  var _isLoading = true;
  String? _error;

  @override
  void initState() {
    super.initState();
    _loadItems();
    // _loadedItems = _loadItems();
  }

  // async makes sure to return a Future if the return type of a function isn't void
  void _loadItems() async {
    // To load items from the backend when app loads
    // Replace 1st url with your Firebase realtime database url
    final url = Uri.https(
        'flutter-your-realtime-firebase-url.com', 'shopping-list.json');
    // To test error codes and exception handling change URL content or remove .com domain
    // try catch block could be used for exception handling if no network or wrong URL

    try {
      final response = await http.get(url);
      // If status codes > 400 ---> error codes indicating some error which will cause the Future object to be rejected by the
      // FutureBuilder class and snapshot.hasError = true below to indicate an error
      if (response.statusCode >= 400) {
        setState(() {
          _error = 'Failed to fetch data. Please try again later.';
        });
      }

      // If no items are present in the Firebase it returns 'null' string, returning empty list so below _loadItems() code isn't executed
      if (response.body == 'null') {
        setState(() {
          _isLoading = false;
        });
        return;
      }

      // Dynamic value means can be multiple datatypes like String, int etc.
      final Map<String, dynamic> listData = json.decode(response.body);
      final List<GroceryItem> loadedItems = [];
      for (final item in listData.entries) {
        final category = categories.entries
            .firstWhere(
                (catItem) => catItem.value.title == item.value['category'])
            .value;
        loadedItems.add(
          GroceryItem(
            id: item.key,
            name: item.value['name'],
            quantity: item.value['quantity'],
            category: category,
          ),
        );
      }
      setState(() {
        _groceryItems = loadedItems;
        _isLoading = false;
      });
    } catch (error) {
      setState(() {
        _error = 'Something went wrong. Please try again later.';
      });
    }
    // return loadedItems;
  }

  void _addItem() async {
    // using async to denote a function that is going to return a value in the future
    // Initially we were adding the data to the backend using post() and getting it back to show on the screen using get() in _loadItems
    // But this is now avoided as the unique id generated by the Firebase for each new item is returned in the post() itself
    // and along with the already available paarmeters new groceryItem is created and showed on the screen saving one get() method
    // data retrieval which can then only be used in initstate() while loading the app
    final newItem = await Navigator.of(context).push<GroceryItem>(
      MaterialPageRoute(
        builder: (ctx) => NewItem(),
      ),
    );

    if (newItem == null) {
      return;
    }

    setState(() {
      _groceryItems.add(newItem);
    });
  }

  void _removeItem(GroceryItem item) async {
    final index = _groceryItems.indexOf(item);
    setState(() {
      _groceryItems.remove(item);
    });
    bool toBeDeleted = true; // Local variable to track deletion status
    ScaffoldMessenger.of(context).clearSnackBars();
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        duration: const Duration(seconds: 3),
        content: const Text("Item deleted"),
        action: SnackBarAction(
          label: 'UNDO',
          onPressed: () {
            setState(() {
              toBeDeleted = false;
              _groceryItems.insert(index, item);
            });
          },
        ),
      ),
    );
    // Wait for 3 seconds before checking if the item should be deleted
    await Future.delayed(const Duration(seconds: 3));
    // Targeting specific item for deletion
    if (toBeDeleted) {
      // Replace 1st url with your Firebase realtime database url
      final url = Uri.https(
        'flutter-your-realtime-firebase-url.firebaseio.com',
        'shopping-list/${item.id}.json',
      );
      // final url = Uri.https(
      //   'flutter.firebaseio.com',
      //   'shopping-list/${item.id}.json',
      // );   // For wrong deletion test case

      final response = await http.delete(url);

      if (response.statusCode >= 400) {
        setState(() {
          _groceryItems.insert(index, item);
        });
        // ignore: use_build_context_synchronously
        ScaffoldMessenger.of(context).clearSnackBars();
        // ignore: use_build_context_synchronously
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            duration: const Duration(seconds: 3),
            content:
                const Text("Item was not deleted. Please try again later!"),
          ),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    Widget content = Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            Icons.question_mark,
            size: 36,
          ),
          SizedBox(
            height: 10,
          ),
          Text(
            "No items added in your list.",
            style: TextStyle(fontSize: 16),
          ),
        ],
      ),
    );

    if (_isLoading) {
      content = const Center(
        child: CircularProgressIndicator(),
      );
    }

    if (_groceryItems.isNotEmpty) {
      content = ListView.builder(
        itemCount: _groceryItems.length,
        itemBuilder: (ctx, index) => Dismissible(
          key: ValueKey(_groceryItems[index].id),
          onDismissed: (direction) {
            _removeItem(_groceryItems[index]);
          },
          background: Container(
            color: Colors.grey[400],
            margin: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
          ),
          child: Padding(
            padding: const EdgeInsets.all(4.0),
            child: ListTile(
              title: Text(_groceryItems[index].name),
              leading: Container(
                width: 24,
                height: 24,
                color: _groceryItems[index].category.color,
              ),
              trailing: Text(
                _groceryItems[index].quantity.toString(),
                style: TextStyle(
                  fontSize: 16,
                ),
              ),
            ),
          ),
        ),
      );
    }

    if (_error != null) {
      content = Center(
        child: Text(
          _error!,
          style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
        ),
      );
    }

    return Scaffold(
      appBar: AppBar(
        title: const Text('Your Groceries'),
        actions: [
          IconButton(
            onPressed: _addItem,
            icon: Icon(Icons.add),
          ),
        ],
      ),
      body: content,
      // FutureBuilder to listen to a future object and make UI updates accordingly
      // snapshot gives access to the current state of the Future object and it's data produced
      // body: FutureBuilder(
      //   future: _loadedItems,
      //   builder: (context, snapshot) {
      //     if (snapshot.connectionState == ConnectionState.waiting) {
      //       return const Center(child: CircularProgressIndicator());
      //     }

      //     if (snapshot.hasError) {
      //       return Center(
      //         child: Text(
      //           snapshot.error.toString(),
      //           style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
      //         ),
      //       );
      //     }

      //     if (snapshot.data!.isEmpty) {
      //       return Center(
      //         child: Column(
      //           mainAxisAlignment: MainAxisAlignment.center,
      //           children: [
      //             Icon(
      //               Icons.question_mark,
      //               size: 36,
      //             ),
      //             SizedBox(
      //               height: 10,
      //             ),
      //             Text(
      //               "No items added in your list.",
      //               style: TextStyle(fontSize: 16),
      //             ),
      //           ],
      //         ),
      //       );
      //     }

      //     return ListView.builder(
      //       itemCount: _groceryItems.length,
      //       itemBuilder: (ctx, index) => Dismissible(
      //         key: ValueKey(_groceryItems[index].id),
      //         onDismissed: (direction) {
      //           _removeItem(_groceryItems[index]);
      //         },
      //         background: Container(
      //           color: Colors.grey[400],
      //           margin: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
      //         ),
      //         child: Padding(
      //           padding: const EdgeInsets.all(4.0),
      //           child: ListTile(
      //             title: Text(_groceryItems[index].name),
      //             leading: Container(
      //               width: 24,
      //               height: 24,
      //               color: _groceryItems[index].category.color,
      //             ),
      //             trailing: Text(
      //               _groceryItems[index].quantity.toString(),
      //               style: TextStyle(
      //                 fontSize: 16,
      //               ),
      //             ),
      //           ),
      //         ),
      //       ),
      //     );
      //   },
      // ),
    );
  }
}
